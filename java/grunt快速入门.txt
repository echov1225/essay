grunt快速入门

参考网站：http://www.gruntjs.net/getting-started

一、安装CLI
将Grunt命令行(GLI)安装到全局变量中：
Windows环境：npm install -g grunt -cli
Grunt GLI作用：调用与Gruntfile在同一目录中的Grunt，允许同一系统中安装多个版本的Grunt。

二、准备一份新的Grunt项目
在项目中添加两个文件：package.json和Gruntfile.
package.json：被npm用于存储项目的元数据，以便将项目发布到npm模块。可以在文件中列出项目依赖的grunt和Grunt插件，放置在devDependencies配置段中。
Gruntfile：此文件被命名为Gruntfile.js和Gruntfile.coffee，用来配置或定义任务并加载Grunt插件。

1、package.json
grunt-init模板会自动创建特定于项目的package.json文件
npm init命令会创建一个基本的package.json文件
package.json格式：
{
  "name": "my-project-name",
  "version": "0.1.0",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-uglify": "~0.5.0"
  }
}
npm install <module> --save-dev命令，不仅安装了<module>，还将自动将其添加到devDependencies配置中。
	安装grunt：npm install grunt --save-dev
	安装JSHint：npm install grunt-contrib-jshint --save-dev

2、Gruntfile
Gruntfile的构成：
	"wrapper"函数
		module.exports = function(grunt) {
			//Do grunt-related things in here
		};
	项目与任务配置
		grunt.initConfig {
			//定义构建配置、任务和目标
		};
		构建配置：
			pkg: grunt.file.readJSON('package.json');
			pkg: {author:"minghe",email:"minghe@36@gmail.com"};
		任务和目标：
			concat: {
				foo: {
				},
				bar : {
				}
			},
	加载grunt插件和任务
		//加载能够提供"uglify"任务的插件。
		grunt.loadNpmTasks('grunt-contrib-uglify');
	自定义任务
		//Default task(s)
		grunt.registerTask('default', ['uglify']);
		default任务列表数组中可以指定任意数目的任务（可以带参数）。
Gruntfile文件案例：
module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    uglify: {
      options: {
        banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
      },
      build: {
        src: 'src/<%= pkg.name %>.js',
        dest: 'build/<%= pkg.name %>.min.js'
      }
    }
  });

  // 加载包含 "uglify" 任务的插件。
  grunt.loadNpmTasks('grunt-contrib-uglify');

  // 默认被执行的任务列表。
  grunt.registerTask('default', ['uglify']);
};
3、grunt插件(详见http://ju.outofmemory.cn/entry/39815)
	grunt-contrib-concat：用于合并任意文件
		concat: {
            dist: {
                src: ['src/*.js'],
                dest: 'build/built.js'
            }
        }
		options:
			//文件内容的分隔符
			separator: ';' 
			//自定义进程函数，比如你需要在合并文件前，对文件名进行处理等。
			process: function(src, filepath) {
				return '// Source: ' + filepath + '\n' + src.replace(/(^|\n)[ \t]*('use strict'|"use strict");?\s*/g, '$1');
			}
	grunt-contrib-copy：用于复制文件或者文件目录
		copy: {
		  main: {
			files: [
			  {src: ['path/*'], dest: 'dest/', filter: 'isFile'}, // 复制path目录下的所有文件
			  {src: ['path/**'], dest: 'dest/'}, // 复制path目录下的所有目录和文件
			]
		  }
		}
	grunt-contrib-clean：删除文件或者目录
		clean: {
		  build: {
			src: ["path/to/dir/one", "path/to/dir/two"]
		  }
		}
	grunt-contrib-compress：用于压缩文件或者目录成为zip包
		compress: {
		  main: {
			options: {
			  archive: 'archive.zip'
			},
			files: [
			  {src: ['path/*'], dest: 'internal_folder/', filter: 'isFile'}, path下所有的js
			  {src: ['path/**'], dest: 'internal_folder2/'}, // path下的所有目录和文件
			]
		  }
		}
	grunt-contrib-jshint：用于JavaScript代码检查，发布前执行jshint任务可以避免一些低级语法错误
		jshint: {
            //具体任务配置
            files: {
                src: ['src/*.js']
            }
		}
		options:
			//大括号包裹
			curly: true,
			//对于简单类型，使用===和!==，而不是==和!=
			eqeqeq: true,
			//对于首字母大写的函数（声明的类），强制使用new
			newcap: true,
			//禁用arguments.caller和arguments.callee
			noarg: true,
			//对于属性使用aaa.bbb而不是aaa['bbb']
			sub: true,
			//查找所有未定义变量
			undef: true,
			//查找类似与if(a = 0)这样的代码
			boss: true,
			//指定运行环境为node.js
			node: true
	grunt-contrib-csslint：用于css检查(需求比较鸡肋)
	grunt-contrib-cssmin：用于css压缩
		cssmin: {
		  compress: {
			files: {
			  "path/to/output.css": ["path/to/input_one.css", "path/to/input_two.css"]
			}
		  }
		}
	grunt-contrib-combo：用于css合并
		css_combo: {
			files: {
			  'dest/index.combo.css': ['src/index.css'],
			}
		}
	grunt-contrib-watch：用于监听文件的变化
		watch: {
		  files: ['<%= jshint.files %>'],
		  tasks: ['jshint']
		}
	grunt-contrib-uglify：对JavaScript文件进行压缩
		uglify: {
            bar: {
				build: {
					//源文件
					src: 'src/hello-grunt.js',
					//目标文件
					dest: 'build/hello-grunt-min.js'
				}
            }
        }
		options: 
			//添加文字到压缩后的文件开始
			banner: '/*! <%= pkg.author %>*/',
			//添加文字到压缩后的文件尾部
			footer:'/*! 这是压缩文件尾部 */',
			//美化代码
			beautify: {
				//中文ascii化，非常有用！防止中文乱码的神配置
				ascii_only: true
			}

